# !/usr/bin/env python
# -*- coding: utf-8 -*-
# date: 2020/06/06
# author: Suqier
# email: suqier5637@foxmail.com
# 在这里尝试着翻译并自己练习黄海广博士的numpy-100项目
# 项目原地址：https://github.com/rougier/numpy-100

# 第七十八题：对于由 2 组点集 P0，P1 所描述的线 (2d) 和点 p ，如何计算从 p 到每条线 i 的距离 (P0[i],P1[i]) ?

import numpy as np


def distance(P0, P1, p):
    T = P1 - P0
    L = (T**2).sum(axis=1)
    U = -((P0[:, 0] - p[..., 0]) * T[:, 0] + (P0[:, 1] - p[..., 1]) * T[:, 1]) / L
    U = U.reshape(len(U), 1)
    D = P0 + U * T - p
    return np.sqrt((D ** 2).sum(axis=1))


P0 = np.random.uniform(-10, 10, (10, 2))
print(P0)

print("---------")
P1 = np.random.uniform(-10, 10, (10, 2))
print(P1)

print("---------")
p  = np.random.uniform(-10, 10, ( 1, 2))
print(p)

print("---------")
print(distance(P0, P1, p))

# 输出内容：
# [[-4.2034124   5.65879178]
#  [ 2.96326069 -7.45921712]
#  [-9.82891214 -9.92553468]
#  [ 3.69501351 -9.02036092]
#  [ 7.24307305 -4.09839845]
#  [ 6.9774802   8.24973343]
#  [-9.39432083 -5.46407841]
#  [-6.07525488  7.25604555]
#  [ 5.83401799 -7.19479387]
#  [ 8.64574303  4.54387866]]
# ---------
# [[ 9.88234476 -4.67605812]
#  [ 0.56591356  2.79667643]
#  [ 8.68757245 -1.60485343]
#  [-9.54279048  7.2509252 ]
#  [ 7.84392161 -6.78628297]
#  [-7.22266553 -5.05869129]
#  [ 8.06833278 -2.31821058]
#  [-9.53662673  7.09367339]
#  [-0.52831096  2.12859324]
#  [ 3.51576635 -1.84681054]]
# ---------
# [[ 2.85407803 -7.66785189]]
# ---------
# [ 6.56981154  0.15380556  3.13923475  0.20123664  5.06197744  8.79450006
#   4.34043344 15.3259171   2.72808262  3.12791324]
